package com.example.pruebakeneth.utils;

import java.io.IOException;
import java.util.List;
import java.util.Locale;

import android.app.Activity;
import android.content.Context;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;


public class LocationUtils {

	public static final int ERR_NO_LOCATION_MANAGER = 1; 
	public static final int ERR_NO_PROVIDERS_ENABLED = 2;

	private LocationManager locationManager;
	private LocationListener locationListener;
	private static final int minTime = 0; 
	private static final int minDistance = 0;
	private int time;
	private Location location;
	private boolean success;
	private String provider;
	private Activity context;
	private static final int maxTime = 5000; // 5 secs
	// for address
	private String mAddress;
	private String mCity;
	private String mCountry;
	private String mState;
	private String mZip;

	public LocationUtils(Activity context){
		// get locationManager in context activity
		locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
		this.context = context;
	}

	public int validateAndRunThread(){
		if(locationManager != null) {

			success = false;
			time = 0;
			locationListener = new LocationListener() {

				@Override
				public void onLocationChanged(Location loc) {
					Log.d("Location Utility", "onLocationChanged");
					location = loc;
					setAddress();
					success = true;
				}

				@Override
				public void onProviderDisabled(String arg0) {
					// TODO Auto-generated method stub
					Log.d("Location Utility", "onProviderDisabled");
				}

				@Override
				public void onProviderEnabled(String provider) {
					// TODO Auto-generated method stub
					Log.d("Location Utility", "onProviderEnabled");
				}

				@Override
				public void onStatusChanged(String provider, int status,
						Bundle extras) {
					// TODO Auto-generated method stub
					Log.d("Location Utility", "onStatusChanged");
				};
			};

			if(locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)){
				Log.d("Location Utility", "NETWORK_PROVIDER");
				locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,
						minTime, minDistance, locationListener);
				provider = LocationManager.NETWORK_PROVIDER;

			} else if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)){
				Log.d("Location Utility", "GPS_PROVIDER");
				locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 
						minTime, minDistance, locationListener);
				provider = LocationManager.GPS_PROVIDER;

			} else if (locationManager.isProviderEnabled(LocationManager.PASSIVE_PROVIDER)) {
				Log.d("Location Utility", "PASSIVE_PROVIDER");
				locationManager.requestLocationUpdates(LocationManager.PASSIVE_PROVIDER, 
						minTime, minDistance, locationListener);
				provider = LocationManager.PASSIVE_PROVIDER;

			} else 
				return ERR_NO_PROVIDERS_ENABLED;
			success = getLastKnowPos();
			initThread();
			return 0; // success!
		} else {
			return ERR_NO_LOCATION_MANAGER;
		}
	}

	public void stop(){
		if(locationManager != null)
			locationManager.removeUpdates(locationListener);
	}

	public double getLatitude() {
		return location.getLatitude();
	}
	
	public double getAltitude() {
		return location.getAltitude();
	}
	
	/**
	 * If this location does not have an accuracy, then 0.0 is returned. 
	 * All locations generated by the LocationManager include an accuracy.
	 * @return
	 */
	public float getAccuracy() {
		return location.getAccuracy();
	}

	public double getLongitude() {
		return location.getLongitude();
	}

	public boolean isSuccess(){
		return success;
	}

	public String getErrorProviderMsj(){
		if(provider != null)
			return "Location can not be obtained with " + provider + " provider";
		else 
			return "Location can not be obtained";
	}

	private void initThread(){
		new ThreadInBackground().execute();
	}

	private boolean getLastKnowPos(){
		if(provider == null || locationManager == null)
			return false;
		Location location = locationManager.getLastKnownLocation(provider);
		boolean success = location != null;
		if(success){
			this.location = location;
			setAddress();
		}
		return success;
	}

	private void setAddress(){
		Geocoder geocoder;
		List<Address> addresses = null;
		geocoder = new Geocoder(context, Locale.getDefault());
		try {
			addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);
			Log.d("Location Helper", "get address");
			if(addresses != null){
				mAddress = addresses.get(0).getAddressLine(0);
				mCity = addresses.get(0).getAddressLine(1);
				mCountry = addresses.get(0).getAddressLine(2);
				Address addr = addresses.get(0);
				if (addr != null){
					mZip = addr.getPostalCode();
					mState  = addr.getAdminArea();
					mCity = addr.getLocality();
				}
				Log.d("Location Helper", "address!!");
			} else 
				Log.d("Location Helper", "no address");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			addresses = null;
			Log.d("Location Helper", "catch address");
		}
	}

	public String getAddress(){
		return mAddress;
	}

	public String getCity(){
		return mCity;
	}

	public String getCountry(){
		return mCountry;
	}

	public String getState() {
		return mState;
	}

	public String getZip() {
		return mZip;
	}


	private class ThreadInBackground extends AsyncTask<String, Void, Void> {

		@Override
		protected void onPreExecute(){

		}

		@Override
		protected Void doInBackground(String... params) {
			while(true){
				try {
					Thread.sleep(1000);
				} catch (Exception e) { }
				Log.d("Location Utility", "Into the thread - h");
				time += 1000;
				if(time >= maxTime){
					if(!success) // last intent
						success = getLastKnowPos();
					break;
				}
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void unused) {

		}

	}
}
